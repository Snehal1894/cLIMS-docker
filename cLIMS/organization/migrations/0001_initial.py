# -*- coding: utf-8 -*-
# Generated by Django 1.9.7 on 2020-05-29 18:32
from __future__ import unicode_literals

from django.conf import settings
import django.contrib.postgres.fields.jsonb
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Award',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('award_name', models.CharField(db_index=True, default='', max_length=50)),
            ],
        ),
        migrations.CreateModel(
            name='Choice',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('choice_name', models.CharField(db_index=True, default='', max_length=50)),
                ('choice_type', models.CharField(default='', max_length=50)),
                ('choice_description', models.CharField(blank=True, max_length=200, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='ContributingLabs',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('lab_name', models.CharField(default='', max_length=100)),
            ],
            options={
                'verbose_name_plural': 'Contributing Labs',
                'ordering': ['lab_name'],
            },
        ),
        migrations.CreateModel(
            name='Experiment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('url', models.URLField(blank=True, help_text='An external resource with additional information about the object', null=True)),
                ('dbxrefs', models.CharField(blank=True, help_text='Unique identifiers from external resources, enter as a database name:identifier eg. HGNC:PARK2', max_length=100, null=True)),
                ('experiment_name', models.CharField(db_index=True, default='', max_length=300, unique=True, validators=[django.core.validators.RegexValidator('^[0-9a-zA-Z-.]*$', 'Only alphanumeric characters, dashes, dots are allowed in names.')])),
                ('biocore_name', models.CharField(blank=True, default='', help_text='short/biocore name', max_length=500, null=True)),
                ('bio_rep_no', models.IntegerField(blank=True, help_text='Biological Replicate number', null=True)),
                ('tec_rep_no', models.IntegerField(blank=True, help_text='Technical Replicate number', null=True)),
                ('biosample_quantity', models.FloatField(default='0', help_text='Quantity of your starting material, e.g. No of cells')),
                ('biosample_quantity_units', models.CharField(choices=[('', ''), ('g', 'g'), ('mg', 'mg'), ('μg', 'μg'), ('ml', 'ml'), ('cells', 'cells')], default='', max_length=5)),
                ('experiment_fields', django.contrib.postgres.fields.jsonb.JSONField(blank=True, null=True)),
                ('experiment_description', models.TextField(blank=True, help_text='A short description of the experiment', max_length=500, null=True)),
                ('dcic_alias', models.CharField(db_index=True, default='', help_text='Provide an alias name for the object for DCIC submission.', max_length=500, unique=True)),
                ('update_dcic', models.BooleanField(default=False, help_text='This object needs to be updated at DCIC.')),
                ('finalize_dcic_submission', models.BooleanField(default=False, help_text='This object and related entries have been submitted to DCIC')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'ordering': ['-pk'],
            },
        ),
        migrations.CreateModel(
            name='ExperimentSet',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('experimentSet_name', models.CharField(db_index=True, default='', max_length=300, unique=True, validators=[django.core.validators.RegexValidator('^[0-9a-zA-Z-.]*$', 'Only alphanumeric characters, dashes, dots are allowed in names.')])),
                ('description', models.TextField(default='', max_length=500)),
                ('dcic_alias', models.CharField(db_index=True, default='', help_text='Provide an alias name for the object for DCIC submission.', max_length=500, unique=True)),
                ('update_dcic', models.BooleanField(default=False, help_text='This object needs to be updated at DCIC.')),
                ('contributing_labs', models.ManyToManyField(blank=True, help_text='Contributing labs for this set.', to='organization.ContributingLabs')),
            ],
        ),
        migrations.CreateModel(
            name='JsonObjField',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('field_name', models.CharField(db_index=True, default='', max_length=50)),
                ('field_type', models.CharField(default='', max_length=50)),
                ('field_set', django.contrib.postgres.fields.jsonb.JSONField(blank=True, null=True)),
                ('jsonField_description', models.CharField(blank=True, max_length=200, null=True)),
            ],
            options={
                'ordering': ['field_name'],
            },
        ),
        migrations.CreateModel(
            name='Project',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('project_name', models.CharField(db_index=True, default='', help_text='Name of the project', max_length=300, unique=True, validators=[django.core.validators.RegexValidator('^[0-9a-zA-Z-.]*$', 'Only alphanumeric characters, dashes, dots are allowed in names.')])),
                ('project_notes', models.TextField(blank=True, help_text='Notes for the project.', null=True)),
                ('project_active', models.BooleanField(default=True, help_text='Is project currently in progress?')),
                ('dcic_alias', models.CharField(db_index=True, default='', help_text='Provide an alias name for the object for DCIC submission.', max_length=500, unique=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('contributing_labs', models.ManyToManyField(blank=True, help_text='Contributing labs for this project', to='organization.ContributingLabs')),
                ('project_contributor', models.ManyToManyField(blank=True, help_text='Collaborating members for this project', related_name='memberProject', to=settings.AUTH_USER_MODEL)),
                ('project_owner', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='ownerProject', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-pk'],
            },
        ),
        migrations.CreateModel(
            name='Publication',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(db_index=True, default='', max_length=300, unique=True, validators=[django.core.validators.RegexValidator('^[0-9a-zA-Z-.]*$', 'Only alphanumeric characters, dashes, dots are allowed in names.')])),
                ('publication_title', models.CharField(default='', help_text='Title of the publication or communication.', max_length=200)),
                ('publication_id', models.CharField(default='', help_text='PMID or doi for the publication.', max_length=200)),
                ('attachment', models.FileField(upload_to='uploads/')),
                ('dcic_alias', models.CharField(db_index=True, default='', help_text='Provide an alias name for the object for DCIC submission.', max_length=500, unique=True)),
                ('update_dcic', models.BooleanField(default=False, help_text='This object needs to be updated at DCIC.')),
                ('contributing_labs', models.ManyToManyField(blank=True, help_text='Contributing labs for this publication.', to='organization.ContributingLabs')),
                ('exp_sets_prod_in_pub', models.ForeignKey(blank=True, help_text='List of experiment sets that are produced by this publication.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='pubProdSet', to='organization.ExperimentSet')),
                ('exp_sets_used_in_pub', models.ForeignKey(blank=True, help_text='List of experiment sets that are used (not produced) by this publication.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='pubUsedSet', to='organization.ExperimentSet')),
                ('publication_categories', models.ForeignKey(help_text='The categorization of publications.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='pubCatChoice', to='organization.Choice')),
                ('publication_published_by', models.ForeignKey(help_text='Publication publisher.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='pubByChoice', to='organization.Choice')),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Tag',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('tag_name', models.CharField(db_index=True, default='', max_length=100, unique=True, validators=[django.core.validators.RegexValidator('^[0-9a-zA-Z-.]*$', 'Only alphanumeric characters, dashes, dots are allowed in names.')])),
                ('project', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='tagProject', to='organization.Project')),
                ('tag_exp', models.ManyToManyField(related_name='tagExp', to='organization.Experiment')),
                ('tag_user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='tagUser', to=settings.AUTH_USER_MODEL)),
            ],
        ),
    ]
